#!/usr/bin/env bash

# shellcheck disable=SC2154
# colors are exported from ~/.bashrc

#################
### VARIABLES ###
#################

# prompt_symbol=""
# prompt_symbol="›"
# prompt_symbol="❯"
# prompt_symbol="🢒"
# prompt_symbol="ᐳ"
# prompt_symbol="🞂"

# dir_prefix="in"
# git_prefix="on"
# git_dirty_prefix="is"
exec_time_prefix="took"

# branch_symbol=""
# branch_symbol=""
git_dirty_symbol="?"
git_stashed_symbol="!"
prompt_symbol="$"

prefix_color="$black"
dir_color="$cyan"
git_branch_color="$magenta"
git_dirty_color="$red"
exec_time_color="$yellow"
exit_ok_color="$white"
exit_bad_color="$black"

###############
### HELPERS ###
###############

is_git_repository() {
	git rev-parse --is-inside-work-tree &> /dev/null
}

timer_start() {
	start_time=${start_time:-$SECONDS}
}

timer_stop() {
	timer=$((SECONDS - start_time))
	unset start_time
}

trap timer_start DEBUG

###############
### MODULES ###
###############

dir_module() {
	PS1+="${dir_color}\W"
}

# -----------------------------------------------------------------------------

git_branch_module() {
	is_git_repository || return

	branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"

	PS1+=" ${git_branch_color}${branch}"
}

# -----------------------------------------------------------------------------

git_dirty_module() {
	is_git_repository || return

	if \
		[[ "$(git status -s)" != "" ]] || \
		[[ "$(git rev-list --left-only --count HEAD...@"{u}" 2> /dev/null)" -gt 0 ]] || \
		[[ "$(git rev-list --left-only --count @"{u}"...HEAD 2> /dev/null)" -gt 0 ]]; then
		status="${git_dirty_symbol}"
	elif [[ -n "$(git stash list 2> /dev/null)" ]]; then
		status="${git_stashed_symbol}"
	else
		status=""
	fi

	if [[ "${status}" != "" ]]; then
		PS1+=" ${git_dirty_color}${status}"
	fi
}

# -----------------------------------------------------------------------------

exec_time_module() {
	(( timer < 3 )) && return

	declare output

	days=$(( timer / 86400 ))
	hours=$(( timer / 3600 % 24 ))
	minutes=$(( timer / 60 % 60 ))
	seconds=$(( timer % 60 ))

	(( days > 0 )) && output+="${days}d "
	(( hours > 0 )) && output+="${hours}h "
	(( minutes > 0 )) && output+="${minutes}m "
	output+="${seconds}s"

	PS1+=" ${prefix_color}${exec_time_prefix} ${exec_time_color}${output}"
}

# -----------------------------------------------------------------------------

exit_code_module() {
	if [[ "$RETVAL" -eq 0 ]]; then
		exit_status="${exit_ok_color}"
	else
		exit_status="${exit_bad_color}"
	fi

	PS1+=" ${exit_status}${prompt_symbol}${reset} "
}

####################
### PROMPT ORDER ###
####################

declare -a prompt_modules=(
	"dir_module"
	"git_branch_module"
	"git_dirty_module"
	"exec_time_module"
	"exit_code_module"
)

######################
### POINT OF ENTRY ###
######################

compose_prompt() {
	RETVAL=$?

	timer_stop

	PS1=""

	# Set window title format:
	# username@hostname:PWD
	# PS1+="\e]0;\u@\h:\w\a"

	PS1+="${bold}"

	for MODULE in "${!prompt_modules[@]}"; do
		${prompt_modules[$MODULE]}
	done
}

PROMPT_COMMAND="compose_prompt"
